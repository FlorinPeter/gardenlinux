#!/usr/bin/env bash
set -euxo pipefail

print_help() {
      echo "options:"
      echo "-h, --help				show brief help"
      echo "-d, --debug				debug mode of this script"
      echo "--no-docs				do not build docs"
	  echo "--no-src				do not source package"
	  echo "--no-python				do not build python bindings"
      echo "-c, --cert-dir DIR		path to cert directory"
      echo "-v, --version FILE		use this VERSION file instead of packages/manual/VERSION"
      echo "-l, --log-dir DIR		folder to place buildlog output if none provided, no logs are persisted"
      echo "-i, --input DIR			copy content from this folder to src before downloading sources"
}

while test $# -gt 0; do
  case "$1" in
	-h|--help) print_help; exit 0;;
	-c|--cert-dir*) CERTDIR=$(realpath $2); shift; shift;;
	--no-docs) shift; noDocs=1;;
	--no-python) shift; noPython=1;;
	--no-src) shift; noSrc=1;;
	-d|--debug) shift; debug=1;;
	-l|--log-dir) logDir=$(realpath $2); shift; shift;;
	-i|--input) inputDir=$(realpath $2); shift; shift;;
	-v|--version) versionFile=$(realpath $2); shift; shift;;
    *) print_help; break;;
  esac
done

echo $versionFile

if [ ${noDocs:-} ]; then
	echo "### No Documentation Package"
	# https://wiki.debian.org/BuildProfileSpec#Registered_profile_names
	DEB_BUILD_PROFILES+=" nodoc"
	# https://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules-options
	DEB_BUILD_OPTIONS+=" nodoc"
fi

if [ ${noSrc:-} ]; then
	echo "### No Source Package"
	# https://wiki.debian.org/BuildProfileSpec#Registered_profile_names
	DEB_BUILD_PROFILES+=" pkg.linux.nosource"
fi

if [ ${noPython:-} ]; then
	echo "### No Python Bindings"
	# https://wiki.debian.org/BuildProfileSpec#Registered_profile_names
	DEB_BUILD_PROFILES+=" nopython"
fi

export DEB_BUILD_PROFILES
export DEB_BUILD_OPTIONS


thisScript="$(realpath $0)"
packagesDir="$(dirname "$thisScript")"
baseDir="${packagesDir}/linux.d"
CERT_DIR="${CERTDIR:-''}"
logDir=${logDir:-''}

versionFile=${versionFile:-${packagesDir}/VERSION}
if [ ! -f "${versionFile}" ]; then echo "Version File provided: '$versionFile' does not exist!"; exit 1; fi

. "${packagesDir}"/.helper
. "${baseDir}"/.kernel-helper
. "${versionFile}"

# Requires .helper to be sourced first. It defines $src
workingDir="$(readlink -f "$(pwd)")"
kernelSrcDir="${workingDir}/linux-${KERNEL_VERSION}"

if [ ${debug:-} ]; then
	define_color
	gl_log "Debug output"

	set -x
	echo "$DEB_BUILD_PROFILES"
	echo "$DEB_BUILD_OPTIONS"
fi

mkdir -p "${kernelSrcDir}"
true > "${workingDir}/changelog"
install_kernel_build_deps

if [ -z ${inputDir+x} ]; then 
	gl_log "No local input Dir specified, downloading sources."
	import_gpg_keys "${baseDir}"
	get_kernel_sources "${workingDir}"
	get_debian_release_env "${workingDir}"
	get_old_kernel "${workingDir}"
	get_ufs5_from_upstream "${workingDir}"
	get_linux_stable_for_comments "${workingDir}"
else
	gl_log "Local input Dir specified - use local pre-downloaded sources."
	gl_log "Only for debugging!"
	gl_warn "Double check that your sources are up to date!"
	if [ -z ${KERNEL_VERSION+x} ]; then echo "KERNEL_VERSION is not set! Version file not properly configured?"; return 1;fi

	if [ -d "${workingDir:?}/linux-${KERNEL_VERSION}" ]; then
		rm -rf "${workingDir:?}/linux-${KERNEL_VERSION}"
	fi

	cp -rn "${inputDir}"/"${KERNEL_VERSION}"/* "${workingDir}"/
fi

pushd "${kernelSrcDir}"
	CURRENT_BUILDENV=$(git describe --tags --abbrev=0)

	if [ "${CURRENT_BUILDENV}" != "${BUILDENV}" ]; then
		gl_error "linux release environment (pre) downloaded does not match your configured BUILDENV"
		gl_error "BUILDENV=${BUILDENV} and CURRENT_BUILDENV=${CURRENT_BUILDENV}"
		exit 1
	fi
popd

bootstrap_kernel_build "${workingDir}" "${baseDir}"
integrate_aufs5_patch "${workingDir}" "${kernelSrcDir}"
set_garden_linux_abi "${workingDir}" "${kernelSrcDir}"
apply_quilt_series "${baseDir}" "${kernelSrcDir}"
setup_certificates "${workingDir}" "${kernelSrcDir}" "${CERT_DIR}"
populate_changelog "${workingDir}" "${kernelSrcDir}"
install_debian_conform_orig "${workingDir}" "${kernelSrcDir}"
generate_custom_control_files "${kernelSrcDir}"
deviate_and_install_required_packages "${workingDir}" "${kernelSrcDir}"

if dpkg --compare-versions "$KERNEL_DEBIAN" lt 5.5 &&
	dpkg --compare-versions "$KERNEL_DEBIAN" ge 5.4; then
	gl_log "downgrade sphinx for 5.4 kernel"
	# old sphinx runs faster and does not bail out on errors for kernel 5.4
	wget -P /tmp https://snapshot.debian.org/archive/debian/20210413T152040Z/pool/main/p/python-docutils/{docutils-common_0.16%2Bdfsg-4_all.deb,python3-docutils_0.16%2Bdfsg-4_all.deb}
	wget -P /tmp https://snapshot.debian.org/archive/debian-ports/20200409T204941Z/pool/main/s/sphinx/{libjs-sphinxdoc_1.8.5-9_all.deb,python3-sphinx_1.8.5-9_all.deb,sphinx-common_1.8.5-9_all.deb}
	sudo apt-get install -y --allow-downgrades -f /tmp/{libjs-sphinxdoc_1.8.5-9_all.deb,python3-sphinx_1.8.5-9_all.deb,sphinx-common_1.8.5-9_all.deb,docutils-common_0.16+dfsg-4_all.deb,python3-docutils_0.16+dfsg-4_all.deb}

fi

enable_control_file "${workingDir}" "${kernelSrcDir}"
do_build "${workingDir}" "${kernelSrcDir}" "${logDir}"
