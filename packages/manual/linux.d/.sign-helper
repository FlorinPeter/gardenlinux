#!/usr/bin/env bash
set -euo pipefail



install_sign_deps(){
	gl_log "Installing sign tools "
	sudo apt-get update
	sudo apt-get install -y --no-install-recommends equivs pesign parallel
}

prepare_signing_env(){
	if [ -z ${KERNEL_ARCH+x} ]; then echo "KERNEL_ARCH is not set"; return 1;fi 

	gl_log "Copy source template of installed garden linux-image-${KERNEL_ARCH}"
	cp -R /usr/share/code-signing/linux-image-${KERNEL_ARCH}-signed-template/source-template linux-signed-${KERNEL_ARCH}
}


do_sign_file(){

	filename="${1}"

	if [ ! -f "/$filename" ]; then
		return 0;
	fi

	mkdir -p "$outputDir/$kernelPackage/${filename%/*}"
	case "${filename##*/}" in
		*.efi | vmlinuz-*)
		pesign -i "/${filename}" --export-signature "${outputDir}/$kernelPackage/${filename}.sig" --sign -d sha256 -n "${CERT_DIR}" -c "${CERT_NAME}"
		;;
		*.ko)
		sudo "$LINUX_SIGNFILE" -dp sha256 "/kernel.key" "/kernel.crt" "/$filename"
		sudo mv "/$filename.p7s" "$outputDir/$kernelPackage/$filename.sig"
		sudo chown dev "$outputDir/$kernelPackage/$filename.sig"
		;;
		*)
		echo >&2 "W: Not signing unrecognised file: $filename"
		return 0
		;;
	esac
	printf 'I: Signed %s\n' "$filename"

}

sign_gardenlinux_files(){
	if [ -z ${KERNEL_ARCH+x} ]; then echo "KERNEL_ARCH is not set"; return 1;fi 

	outputDir="debian/signatures"
	ls && pwd
	kernelArchPackageDir="linux-signed-${KERNEL_ARCH}"

	CERT_DIR=${CERTDIR:-${WORKDIR}/certdir}
	CERT_NAME="Garden Linux Kernel Signature - SAP SE"

	major=`echo ${KERNEL_VERSION} | cut -d. -f1`
	minor=`echo ${KERNEL_VERSION} | cut -d. -f2`
	KERNEL_VERSION_MAJOR_MINOR="${major}.${minor}"
	LINUX_SIGNFILE=/usr/lib/linux-kbuild-${KERNEL_VERSION_MAJOR_MINOR}/scripts/sign-file

	pushd ${kernelArchPackageDir}

	for i in $KERNEL_FLAVOURS; do
		kernelPackage="linux-image-${i}-${KERNEL_ARCH}-unsigned"
		mkdir -p $outputDir/$kernelPackage
		gl_log $kernelPackage

		export outputDir
		export kernelPackage
		export CER_DIR
		export LINUX_SIGNFILE
		export -f do_sign_file

		(dpkg -L $kernelPackage | grep -e vmlinuz -e /lib/modules | cut -c2-) |
				parallel do_sign_file

	done

	gl_log "Done Signing Files"

	popd
}


install_garden_linux_packages() {

	usage="${FUNCNAME[0]} <BUILDTARGET>"
	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	BUILDTARGET="${1}"
	check_dir_path "${usage}" "${BUILDTARGET}"

	if [ -z ${KERNEL_BASE+x} ]; then echo "KERNEL_BASE is not set"; return 1;fi 
	if [ -z ${KERNEL_VERSION+x} ]; then echo "KERNEL_VERSION is not set"; return 1;fi 
	if [ -z ${KERNEL_ARCH+x} ]; then echo "KERNEL_ARCH is not set"; return 1;fi 

	gl_log "Install Garden Linux Packages for Kernel Version: ${KERNEL_VERSION}."
	sudo apt-get install -y --no-install-recommends -f \
		$BUILDTARGET/main/l/linux/linux-kbuild-$(cut -d. -f-2 <<< ${KERNEL_BASE})_${KERNEL_VERSION}_${KERNEL_ARCH}.deb \
		$BUILDTARGET/main/l/linux/linux-support-${KERNEL_BASEABI}_${KERNEL_VERSION}_all.deb \
		$BUILDTARGET/main/l/linux/linux-image-${KERNEL_ARCH}-signed-template_${KERNEL_VERSION}_${KERNEL_ARCH}.deb

	for i in $KERNEL_FLAVOURS; do
		sudo apt-get install -y --no-install-recommends \
			$BUILDTARGET/main/l/linux/linux-image-${i}-${KERNEL_ARCH}-unsigned_${KERNEL_VERSION}_${KERNEL_ARCH}.deb
	done
}


build_signed_packages(){

	usage="${FUNCNAME[0]} <signed outputdir>"
	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	outputDir="${1}"

	check_dir_path "${usage}" "${outputDir}"
	if [ -z ${KERNEL_ARCH+x} ]; then echo "KERNEL_ARCH is not set"; return 1;fi 
	gl_log "Build the signed packages";
	
	pushd "${outputDir}"
		TMPDIR=.. mk-build-deps debian/control
		sudo apt-get install -y --no-install-recommends -f ../linux-signed-${KERNEL_ARCH}-build-deps*.deb
		donotmove="$(ls ..)"
		debuild
		src=linux-signed-${KERNEL_ARCH}
		move_package .. $donotmove
	popd
}

setup_signing_certificates(){
	usage="${FUNCNAME[0]} <CERT_DIR>"
	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	CERT_DIR="${1}"

	gl_log "Setup Certificates"
	mkdir -p "${CERT_DIR}"
	openssl pkcs12 -export -out ${CERT_DIR}/kernel.p12 -inkey "/kernel.key" -in "/kernel.crt" -passout pass:""
	pk12util -i "${CERT_DIR}/kernel.p12" -d "${CERT_DIR}" -W "" -K ""

}
