#!/usr/bin/env bash

define_color(){
	BLUE='\033[0;34m'
	YELLOW='\033[0;33m'
	RED='\033[0;31m'
	NC='\033[0m' # No Color
	COLOR_ENABLE=1
}

check_file_path(){
	if [ ! -f "${2}" ]; then echo "File '$2' does not exist! 'usage: $1'"; exit 1; fi;
}

check_dir_path(){
	if [ ! -d "${2}" ]; then echo "Directory '$2' does not exist! 'usage $1'"; exit 1; fi;
}

gl_warn(){
	if [ -z ${COLOR_ENABLE+x} ]; then
		echo -e "### Warning: ${1}";
	else
		echo -e "### Warning: ${YELLOW}${1}${NC}";
	fi
}

gl_error(){
	if [ -z ${COLOR_ENABLE+x} ]; then
		echo -e "### GARDEN LINUX BUILD ERROR: ${1}";
	else
		echo -e "### GARDEN LINUX BUILD ERROR: ${RED}${1}${NC}";
	fi
}

gl_log(){
	if [ -z ${COLOR_ENABLE+x} ]; then
		echo -e "### Log: ${1}";
	else
		echo -e "### Log: ${BLUE}${1}${NC}";
	fi
}


apply_to_changelog() {
	local usage="${FUNCNAME[0]} <workingdir> <changelog string>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	if [ -z ${2+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	local workingdir=$1
	local changelogFile="${workingdir}/changelog"
	local changelogString=$2

	check_file_path "${usage}" "${changelogFile}"	

	gl_log "Appending Changlog entry: '${changelogString}' to ${changelogFile}"
	echo "${changelogString}" >> "${changelogFile}"
}



copy_garden_kernel_patches_to_buildenv() {

	local usage="${FUNCNAME[0]} <path to linux.d dir> <srcDir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	if [ -z ${2+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	if [ -z ${KERNEL_VERSION+x} ]; then echo "KERNEL_VERSION is not set"; return 1;fi 

	local linuxBaseDir=$1
	local srcDir=$2
	local patchDir="${linuxBaseDir}/patches/${KERNEL_VERSION}"

	check_dir_path "${usage}" "${linuxBaseDir}"
	check_dir_path "${usage}" "${srcDir}"
	check_dir_path "${usage}" "${patchDir}"

	if [ -f "${patchDir}"/series ]; then
		gl_log "copy quilt patches from ${patchDir}/kernel to ${srcDir}/debian/garden"
		mkdir -p "${srcDir}"/debian/patches/garden
		cp -rL "${patchDir}"/kernel/ "${srcDir}"/debian/patches/garden/ 
	else
		gl_warn "No Patches for ${KERNEL_VERSION} in ${patchDir} found!"
	fi

}

apply_quilt_series() {

	local usage="${FUNCNAME[0]} <source dir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	if [ -z ${2+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	if [ -z ${KERNEL_VERSION+x} ]; then gl_error "KERNEL_VERSION is not set"; return 1;fi 
	
	local linuxBaseDir=$1
	local srcDir=$2
	local patchDir="${linuxBaseDir}/patches/${KERNEL_VERSION}"

	check_dir_path "${usage}" "${srcDir}"

	if [ -f "${patchDir}/series" ]; then
		pushd "${srcDir}" || exit 1
			gl_log "applying quilt patches from ${patchDir}"
			QUILT_PATCHES=${patchDir} \
			QUILT_REFRESH_ARGS="-p ab --no-timestamps --no-index" \
			quilt push -a -q
		popd || exit 1

	else
		gl_warn "No Patches for ${KERNEL_VERSION} in ${patchDir} found!"
	fi


}

setup_certificates() {
	usage="${FUNCNAME[0]} <workingDir> <srcDir> <path to certificates folder>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	if [ -z ${2+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	local workingDir=$1
	local srcDir=$2
	local CERT_DIR=$3

	check_dir_path "${usage}" "${workingDir}"
	check_dir_path "${usage}" "${srcDir}"

	pushd "${srcDir}" || exit 1
		gl_log "Setting certificates"

		# to make sure we do not take this accidently
		rm -f debian/certs/debian-uefi-certs.pem
		if [ -e "${CERT_DIR}/kernel.full" ]; then
				cp "${CERT_DIR}/kernel.full" debian/certs/gardenlinux-kernel-certs.pem
		elif [ -e "${CERT_DIR}/Kernel.sign.full" ]; then
				cp "${CERT_DIR}/Kernel.sign.full" debian/certs/gardenlinux-kernel-certs.pem
		else
				cp /kernel.full debian/certs/gardenlinux-kernel-certs.pem
		fi

		# TODO: Note: why did 5.10 not replace also in debian/config/defines (like 5.4 did)
		sed -i "s/debian-uefi-certs.pem/gardenlinux-kernel-certs.pem/" debian/config/defines debian/config/config debian/config/featureset*/config
		apply_to_changelog "${workingDir}" "  * Replaced Debian signing certs with GardenLinux certs"
	popd || exit 1

}

populate_changelog() {
	local usage="${FUNCNAME[0]} <workingDir> <srcDir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	local workingDir=$1
	local srcDir=$2

	local prePopChangelogFile="${workingDir}/changelog"
	
	pushd "${srcDir}" || exit 1
		
	check_file_path "${usage}" "${prePopChangelogFile}"

	prePopChangelogContent=$(cat "${prePopChangelogFile}")

	gl_log "Populating the changelog"
	mv debian/changelog debian/changelog.org

cat - > debian/changelog <<EOF
linux (${KERNEL_VERSION}-1) UNRELEASED; urgency=medium

  [ Garden Linux Maintainers ]
  * new upstream Version ${KERNEL_VERSION}
$(echo -e "$prePopChangelogContent")

 -- Garden Linux Maintainers <contact@gardenlinux.io>  $(date -R)

EOF
	cat debian/changelog
	
	# TODO: why do we need to call stable-update?
	#	it prepends a changelog entry.
	#	but we already prepend out stuff ourself to the changelog
	debian/bin/stable-update ${workingDir}/linux-stable "${KERNEL_VERSION}"
	mv debian/changelog debian/changelog.newkernel
	cat debian/changelog.newkernel debian/changelog.org > debian/changelog

	rm -f debian/changelog.new debian/changelog.newkernel debian/changelog.org
	dch -lgardenlinux ""
	dch -r "" --distribution "stable"

	popd || exit 1
}

install_debian_conform_orig() {
	local usage="${FUNCNAME[0]} <workingdir> srcDir> "
	
	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi
	if [ -z ${2+x} ]; then gl_error "usage: ${usage}"; exit 1;fi

	local srcDir=$2	
	local workingDir=$1

	gl_log "Generating a debian conform orig file and install"

	pushd "${srcDir}" || exit 1
		[ -e ${workingDir}/orig/linux_*.tar.xz ] || PYTHONHASHSEED=0 debian/bin/genorig.py ${workingDir}/linux-*.tar.xz
		gl_log "Make debuab/rules orig"
		make -f debian/rules orig
	popd || exit 1
}

generate_custom_control_files() {
	local usage="${FUNCNAME[0]} <srcDir> "
	
	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi

	local srcDir=$1

	gl_log "Generate custom control files"
	pushd "${srcDir}" || exit 1
		PYTHONHASHSEED=0 debian/bin/gencontrol.py
	popd || exit 1
}

deviate_and_install_required_packages() {
	local usage="${FUNCNAME[0]} <workingdir> srcDir> "
	
	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi
	if [ -z ${2+x} ]; then gl_error "usage: ${usage}"; exit 1;fi

	local srcDir=$2	
	local workingDir=$1	
	
	gl_log "deviate needed packages and install"
	pushd "${srcDir}" || exit 1
		TMPDIR=.. mk-build-deps debian/control
		sudo apt-get install -y --no-install-recommends -f "${workingDir}"/linux-build-deps_*_"${KERNEL_ARCH}".deb
	popd || exit 1
}

enable_control_file() {
	local usage="${FUNCNAME[0]} <workingdir> srcDir> "
	
	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi
	if [ -z ${2+x} ]; then gl_error "usage: ${usage}"; exit 1;fi

	local srcDir=$2	
	local workingDir=$1	

	gl_log "enabling control file (supposed to fail)"
	pushd "${srcDir}" || exit 1
		make -f debian/rules debian/control-real || /bin/true
	popd || exit 1
}

do_build() {	
	local usage="${FUNCNAME[0]} <workingdir> <srcDir> <path buildlog output dir. if empty no logs are stored>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi
	if [ -z ${2+x} ]; then gl_error "usage: ${usage}"; exit 1;fi
	if [ -z ${3+x} ]; then gl_error "usage: ${usage}"; exit 1;fi

	local workingDir=$1
	local srcDir=$2
	local buildlogDir=$3
	donotmove=$(ls "${workingDir}")
	gl_log "build"

	pushd "${srcDir}" || exit 1

	if [ -z "${buildlogDir}" ];then
		debuild
	else
		check_dir_path "${usage}" "${buildlogDir}"
		# make sure a empty debuild.log file exists
		debuild | sudo tee -a "${buildlogDir}/debuild.log"
	fi

	mv "${workingDir}/orig/linux_${KERNEL_VERSION}.orig.tar.xz" "${workingDir}/"
	rm -rf "${workingDir}/orig"
	src=linux
	export src
	move_package "${workingDir}" "$donotmove"

	popd || exit 1

}

set_garden_linux_abi() {
	local usage="${FUNCNAME[0]} <workingDir> <srcDir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	local workingDir=$1
	local srcDir=$2

	check_dir_path "${usage}" "${workingDir}"
	check_dir_path "${usage}" "${srcDir}"

	if [ -z ${KERNEL_ABI+x} ]; then gl_error "KERNEL_ABI is not set"; return 1;fi 
	if [ -z ${KERNEL_FLAVOURS+x} ]; then gl_error "KERNEL_VLAVOURS is not set"; return 1;fi 
	pushd "${srcDir}" || exit 1
		gl_log "setting Garden Linux abi"
		sed -i "s/abiname:.*/abiname:$KERNEL_ABI/" debian/config/defines
		apply_to_changelog "${workingDir}" "  * Bump ABI to $KERNEL_ABI."

		if [[ $KERNEL_FLAVOURS != *"-rt"* ]]; then
			sed -i "s/enabled: true/enabled: false/" debian/config/defines
			apply_to_changelog "${workingDir}" "  * Disabled RT featureset"
		fi
		if [[ $KERNEL_FLAVOURS != *"-cloud"* ]]; then
			sed -i "/^ cloud-amd64$/d" debian/config/amd64/none/defines
			apply_to_changelog "${workingDir}" "   * Disabled cloud featureset"
		fi
	popd || exit 1
}


integrate_aufs5_patch() {
	local usage="${FUNCNAME[0]} <working dir> <src dir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	local workingDir=$1
	local srcDir=$2

	check_dir_path "${usage}" "${workingDir}"
	check_dir_path "${usage}" "${srcDir}"

	gl_log "### integrating aufs5-patches"
	
	pushd "${workingDir}"/aufs5-standalone || exit 1
		aufscommit=$(git log -n1 --oneline --no-abbrev-commit | cut -f1 -d' ')
	popd || exit 1

	pushd "${srcDir}" || exit 1
		debian/bin/genpatch-aufs "${workingDir}/aufs5-standalone"
		apply_to_changelog "${workingDir}" "  * [aufs5] Update to $aufscommit"
	popd || exit 1
}

bootstrap_kernel_build() {
	local usage="${FUNCNAME[0]} <working dir> <base dir linux.d>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	if [ -z ${2+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	if [ -z ${KERNEL_DEBIAN+x} ]; then gl_error "KERNEL_DEBIAN is unset"; return 1; fi 

	local workingDir=$1
	local baseDir=$2
	local linuxReleaseEnvDir="${workingDir}/linux-${KERNEL_VERSION}"
	local keepPatchesListFile="${baseDir}/patches/${KERNEL_VERSION}/keep.list"
	local customConfigFile="${baseDir}/config/${KERNEL_VERSION}/config"

	check_dir_path "${usage}" "${workingDir}"
	check_dir_path "${usage}" "${linuxReleaseEnvDir}"
	check_dir_path "${usage}" "${baseDir}"

	gl_log "bootstrapping the kernel build"

	pushd "${linuxReleaseEnvDir}" || exit 1

	# keeping the upstream defines
	mv debian/config/defines debian/config.defines
	
	# Keep patches specified in keep.list for this version
	# If not in keep.list, all content of debian/patches will be replaced with the $KERNEL_DEBIAN version
	mkdir -p debian/patches.keep
	[ ! -s "${keepPatchesListFile}" ] || rsync -av --files-from="${keepPatchesListFile}" "debian/patches" "debian/patches.keep/"

	rm -r debian/patches

	# TODO: use debian original rt patches if they are up to date.
	rm -rf debian/config debian/patches-rt/*
	
	
	
	rm -rf debian/changelog 
	
	cp -R "${workingDir}"/linux-"$KERNEL_DEBIAN"/debian/patches "${workingDir}"/linux-"$KERNEL_DEBIAN"/debian/config debian/
	[ -z "$(ls -A debian/patches.keep)" ] || cp -r debian/patches.keep/* debian/patches/

	cp "${workingDir}"/linux-"$KERNEL_DEBIAN"/debian/changelog debian/changelog
	mv debian/config.defines debian/config/defines

	# If we have a custom config file, we overwrite debians config with our config
	if [ ! -d "${baseDir}/config/${KERNEL_VERSION}" ] || [ -z "${customConfigFile}" ]; then
		gl_log "No Custom Config file available"
	else
		cp "${customConfigFile}" debian/config/config
	fi

	# if debian is older then our patchset, then we have to generate it ourself
	# NOTE: in this case, we might need to apply patches to the RT patchset to make them work 
	if dpkg --compare-versions "$KERNEL_DEBIAN" lt "$KERNEL_VERSION"; then
	        gl_log "integrating rt-patches"

		# fix: 	genpatch-rt is verifying the RT patches via gpgv like this:
		#
		#	xzcat ../patches.tar.xz |\
	    # 	gpgv
		#		--status-fd 1
	    #		--keyring debian/upstream/rt-signing-key.pgp
	    #		--ignore-time-conflict ../patches.tar.sign  -
		#
		# 	The patches.tar.xz where signed by Tom Zanussi.
		#	However, his gpgkey was added to the keyring debian/upstream/rt-singing-key.pgp
		#	To make sure to include his gpg key, we pull the latest rt-signing-key from salsa

		import_gpg_keys "${baseDir}" "${linuxReleaseEnvDir}/debian/upstream/rt-signing-key.pgp"
		debian/bin/genpatch-rt "${workingDir}"/patches-"$KERNEL_RT_VERSION".tar.xz
		apply_to_changelog "${workingDir}" "  * [rt] Update to $KERNEL_RT_VERSION and re-enable"
	else
	        cp -R "${workingDir}"/linux-"$KERNEL_DEBIAN"/debian/patches-rt debian/
	fi
	popd || exit 1

}


install_kernel_build_deps() {
	gl_log "updating package repsitory"
	sudo apt-get update
	gl_log "installing minimal create requirements"
	sudo apt-get install --no-install-recommends -y \
		equivs \
	        kernel-wedge \
	       	python3-debian \
		rsync \
		libdistro-info-perl \
	       	git			`# For pulling sources` \
		quilt			`# Applying patches and Fix on the fly` \


}

import_gpg_keys() {
	usage="${FUNCNAME[0]} <path to linux.d dir> <optional: path to keyring to use>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 
	
	local keyringPath=
	if [ -z ${2+x} ]; then
		keyringPath="" 
	else
		keyringPath="--no-default-keyring --keyring ${2}"
	fi 

	local linuxD=$1
	local path_to_gpg_keys="${1}/gpgkeys"

	check_dir_path "${usage}" "${linuxD}" 
	check_file_path "${usage}" "${path_to_gpg_keys}"

	gl_log "Getting the keys of the maintainers"
	
	if [ ! -d "pgpkeys/keys" ]; then
		git clone git://git.kernel.org/pub/scm/docs/kernel/pgpkeys.git
	fi

	while IFS= read -r i
	do
		gl_log "searching key: $i"
		if ! grep -qr 'pgpkeys/keys/' -e "${i}"; then
			gl_error "GPGKey ${i} not found!"
			bash
			exit 1
		else
			gpg ${keyringPath} --import "$(grep -lr 'pgpkeys/keys/' -e "${i}")"
		fi
	done <"${path_to_gpg_keys}"
	
	gpg ${keyringPath} --update-trustdb

	gpg ${keyringPath} --tofu-policy good $(gpg ${keyringPath}  --list-keys $(cat ${path_to_gpg_keys}) | grep "^      ")

	
	rm -rf pgpkeys

}



get_kernel_sources() {
	usage="${FUNCNAME[0]} <outputDir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	local outputDir=$1

	check_dir_path "${usage}" "${outputDir}"

	if [ -z ${KERNEL_VERSION+x} ]; then gl_error "KERNEL_VERSION is unset"; return 1; else gl_log "KERNEL_VERSION is set to '$KERNEL_VERSION'"; fi
	if [ -z ${KERNEL_RT_VERSION+x} ]; then gl_error "KERNEL_RT_VERSION is unset"; return 1; else gl_log "KERNEL_RT_VERSION is set to '$KERNEL_RT_VERSION'"; fi


	gl_log "pulling kernel and rt-patches"


	wget -O "${outputDir}"/linux-"$KERNEL_VERSION".tar.sign \
	        https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-"$KERNEL_VERSION".tar.sign

	if [ ! -f "${outputDir}"/linux-"$KERNEL_VERSION".tar.sign ]; then gl_error "${outputDir}/linux-${KERNEL_VERSION}.tar.sign not found!"; return 1; fi

	wget -O "${outputDir}"/patches-"$KERNEL_RT_VERSION".tar.sign \
	        https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/"$(cut -d. -f-2 <<< "${KERNEL_BASE}")"/older/patches-"$KERNEL_RT_VERSION".tar.sign

	while [ ! -e "${outputDir}"/linux-"$KERNEL_VERSION".tar.xz ] || ! $(xz -dc "${outputDir}"/linux-$KERNEL_VERSION.tar.xz | gpg --verify "${outputDir}"/linux-"$KERNEL_VERSION".tar.sign -); do
		wget -O "${outputDir}"/linux-"$KERNEL_VERSION".tar.xz \
		      	https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-"$KERNEL_VERSION".tar.xz
	done

	while [ ! -e "${outputDir}"/patches-"$KERNEL_RT_VERSION".tar.xz ] || ! $(xz -dc ${outputDir}/patches-"$KERNEL_RT_VERSION".tar.xz | gpg --verify ${outputDir}/patches-"$KERNEL_RT_VERSION".tar.sign -); do
	        wget -O "${outputDir}"/patches-"$KERNEL_RT_VERSION".tar.xz \
	                https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/$(cut -d. -f-2 <<< "${KERNEL_BASE}")/older/patches-"$KERNEL_RT_VERSION".tar.xz
	done

}


get_old_kernel() {
	usage="${FUNCNAME[0]} <output dir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	local outputDir=$1

	check_dir_path "${usage}" "${outputDir}"

	if [ -z ${KERNEL_DEBIAN+x} ]; then gl_error "KERNEL_DEBIAN is unset"; return 1; else gl_log "KERNEL_DEBIAN is set to '$KERNEL_DEBIAN'"; fi

	gl_log "cloning the old kernel to linux-$KERNEL_DEBIAN"

	if [ ! -d "${outputDir}"/linux-"$KERNEL_DEBIAN" ]; then
	        git -c advice.detachedHead=false clone --depth 1 --single \
			--branch debian/"$KERNEL_DEBIAN" \
	                https://salsa.debian.org/kernel-team/linux.git "${outputDir}"/linux-"$KERNEL_DEBIAN"
	fi
}


get_debian_release_env() {
	usage="${FUNCNAME[0]} <output dir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	if [ -z ${BUILDENV+x} ]; then gl_error "BUILDENV is unset"; return 1; else gl_log "BUILDENV is set to '$BUILDENV'"; fi
	if [ -z ${BUILDENV_BRANCH+x} ]; then gl_error "BUILDENV_BRANCH is unset"; return 1; else gl_log "BUILDENV_BRANCH is set to '$BUILDENV_BRANCH'"; fi
	if [ -z ${KERNEL_VERSION+x} ]; then gl_error "KERNEL_VERSION is unset"; return 1; else gl_log "KERNEL_VERSION is set to '$KERNEL_VERSION'"; fi

	local outputDir="$1/linux-${KERNEL_VERSION}"

	gl_log "cloning the latest and greatest debian release environment to for the kernel"

	# If release directory exists AND is a git directory, we can safely use git reset
	if [ -d "${outputDir}" ] && [ -d "${outputDir}/.git" ]; then
		pushd "${outputDir}" || exit 1;
			git fetch origin tag "$BUILDENV" --no-tags
	       	git reset --hard origin/"$BUILDENV_BRANCH";
	       	git checkout "$BUILDENV"
	    popd || exit 1
	else
		if [ -d "${outputDir}" ]; then rm -r "${outputDir}"; fi
		git clone --single --branch "$BUILDENV_BRANCH" https://salsa.debian.org/kernel-team/linux.git "${outputDir}"
		pushd "${outputDir}" || exit 1
			git fetch --tags
	       	git checkout "$BUILDENV"
		popd || exit 1
	fi

}

get_ufs5_from_upstream() {
	usage="${FUNCNAME[0]} <workingDir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	local workingDir=$1

	check_dir_path "${usage}" "${workingDir}"

	if [ -z ${KERNEL_BASE+x} ]; then gl_error "KERNEL_BASE is unset"; return 1; else gl_log "KERNEL_BASE is set to '$KERNEL_BASE'"; fi

	echo "### pulling aufs5 from upstream not from debian"

	if [ ! -d  "${workingDir}"/aufs5-standalone ]; then
		git -c advice.detachedHead=false clone --single \
			--branch aufs"$(cut -d. -f-2 <<< "${KERNEL_BASE}")" \
			https://github.com/sfjro/aufs5-standalone.git "${workingDir}"/aufs5-standalone
	fi

}


get_linux_stable_for_comments() {
	usage="${FUNCNAME[0]} <workingDir>"

	if [ -z ${1+x} ]; then gl_error "usage: ${usage}"; exit 1;fi 

	local workingDir=$1

	check_dir_path "${usage}" "${workingDir}"

	if [ -z ${KERNEL_BASE+x} ]; then gl_error "KERNEL_BASE is unset"; return 1; else gl_log "KERNEL_BASE is set to '$KERNEL_BASE'"; fi

	gl_log "pulling linux-stable for comments"

	# checking out linux stable to have the whole changelog from the kernel readable for debian/bin/stable-update
	if [ ! -d "${workingDir}"/linux-stable ]; then
        	git clone --single --branch linux-"${KERNEL_BASE//.0/.y}" --bare \
			https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git "${workingDir}"/linux-stable
	fi
}


