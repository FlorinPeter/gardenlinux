--- a/debian/patches-rt/0133-completion-Use-simple-wait-queues.patch	2021-07-27 07:22:27.915858861 +0000
+++ b/debian/patches-rt/0133-completion-Use-simple-wait-queues.patch	2021-07-27 07:22:43.931859209 +0000
@@ -30,11 +30,11 @@
  kernel/sched/swait.c                          | 21 +++++++++++-
  11 files changed, 67 insertions(+), 29 deletions(-)
 
-diff --git a/arch/powerpc/platforms/ps3/device-init.c b/arch/powerpc/platforms/ps3/device-init.c
-index 2735ec90414d..359231cea8cd 100644
---- a/arch/powerpc/platforms/ps3/device-init.c
-+++ b/arch/powerpc/platforms/ps3/device-init.c
-@@ -738,8 +738,8 @@ static int ps3_notification_read_write(struct ps3_notification_device *dev,
+Index: source_rt/arch/powerpc/platforms/ps3/device-init.c
+===================================================================
+--- source_rt.orig/arch/powerpc/platforms/ps3/device-init.c	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/arch/powerpc/platforms/ps3/device-init.c	2021-07-27 07:21:02.227857000 +0000
+@@ -738,8 +738,8 @@
  	}
  	pr_debug("%s:%u: notification %s issued\n", __func__, __LINE__, op);
  
@@ -45,11 +45,11 @@
  	if (kthread_should_stop())
  		res = -EINTR;
  	if (res) {
-diff --git a/drivers/net/wireless/intersil/orinoco/orinoco_usb.c b/drivers/net/wireless/intersil/orinoco/orinoco_usb.c
-index e2368bfe3e46..68e640dbe7ef 100644
---- a/drivers/net/wireless/intersil/orinoco/orinoco_usb.c
-+++ b/drivers/net/wireless/intersil/orinoco/orinoco_usb.c
-@@ -693,8 +693,8 @@ static void ezusb_req_ctx_wait(struct ezusb_priv *upriv,
+Index: source_rt/drivers/net/wireless/intersil/orinoco/orinoco_usb.c
+===================================================================
+--- source_rt.orig/drivers/net/wireless/intersil/orinoco/orinoco_usb.c	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/drivers/net/wireless/intersil/orinoco/orinoco_usb.c	2021-07-27 07:21:02.231857000 +0000
+@@ -693,8 +693,8 @@
  			while (!ctx->done.done && msecs--)
  				udelay(1000);
  		} else {
@@ -60,24 +60,24 @@
  		}
  		break;
  	default:
-diff --git a/drivers/usb/gadget/function/f_fs.c b/drivers/usb/gadget/function/f_fs.c
-index 3126f5b08bd4..50e01f1eff17 100644
---- a/drivers/usb/gadget/function/f_fs.c
-+++ b/drivers/usb/gadget/function/f_fs.c
-@@ -1722,7 +1722,7 @@ static void ffs_data_put(struct ffs_data *ffs)
- 		pr_info("%s(): freeing\n", __func__);
+Index: source_rt/drivers/usb/gadget/function/f_fs.c
+===================================================================
+--- source_rt.orig/drivers/usb/gadget/function/f_fs.c	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/drivers/usb/gadget/function/f_fs.c	2021-07-27 07:21:51.471858069 +0000
+@@ -1719,7 +1719,7 @@
  		ffs_data_clear(ffs);
+ 		ffs_release_dev(ffs->private_data);
  		BUG_ON(waitqueue_active(&ffs->ev.waitq) ||
 -		       waitqueue_active(&ffs->ep0req_completion.wait) ||
 +		       swait_active(&ffs->ep0req_completion.wait) ||
  		       waitqueue_active(&ffs->wait));
  		destroy_workqueue(ffs->io_completion_wq);
  		kfree(ffs->dev_name);
-diff --git a/drivers/usb/gadget/legacy/inode.c b/drivers/usb/gadget/legacy/inode.c
-index cabcbb47f0ac..b00b4ee372e6 100644
---- a/drivers/usb/gadget/legacy/inode.c
-+++ b/drivers/usb/gadget/legacy/inode.c
-@@ -344,7 +344,7 @@ ep_io (struct ep_data *epdata, void *buf, unsigned len)
+Index: source_rt/drivers/usb/gadget/legacy/inode.c
+===================================================================
+--- source_rt.orig/drivers/usb/gadget/legacy/inode.c	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/drivers/usb/gadget/legacy/inode.c	2021-07-27 07:21:02.231857000 +0000
+@@ -344,7 +344,7 @@
  	spin_unlock_irq (&epdata->dev->lock);
  
  	if (likely (value == 0)) {
@@ -86,7 +86,7 @@
  		if (value != 0) {
  			spin_lock_irq (&epdata->dev->lock);
  			if (likely (epdata->ep != NULL)) {
-@@ -353,7 +353,7 @@ ep_io (struct ep_data *epdata, void *buf, unsigned len)
+@@ -353,7 +353,7 @@
  				usb_ep_dequeue (epdata->ep, epdata->req);
  				spin_unlock_irq (&epdata->dev->lock);
  
@@ -95,10 +95,10 @@
  				if (epdata->status == -ECONNRESET)
  					epdata->status = -EINTR;
  			} else {
-diff --git a/include/linux/completion.h b/include/linux/completion.h
-index 519e94915d18..bf8e77001f18 100644
---- a/include/linux/completion.h
-+++ b/include/linux/completion.h
+Index: source_rt/include/linux/completion.h
+===================================================================
+--- source_rt.orig/include/linux/completion.h	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/include/linux/completion.h	2021-07-27 07:21:02.231857000 +0000
 @@ -9,7 +9,7 @@
   * See kernel/sched/completion.c for details.
   */
@@ -117,7 +117,7 @@
  };
  
  #define init_completion_map(x, m) __init_completion(x)
-@@ -34,7 +34,7 @@ static inline void complete_acquire(struct completion *x) {}
+@@ -34,7 +34,7 @@
  static inline void complete_release(struct completion *x) {}
  
  #define COMPLETION_INITIALIZER(work) \
@@ -126,7 +126,7 @@
  
  #define COMPLETION_INITIALIZER_ONSTACK_MAP(work, map) \
  	(*({ init_completion_map(&(work), &(map)); &(work); }))
-@@ -85,7 +85,7 @@ static inline void complete_release(struct completion *x) {}
+@@ -85,7 +85,7 @@
  static inline void __init_completion(struct completion *x)
  {
  	x->done = 0;
@@ -135,11 +135,11 @@
  }
  
  /**
-diff --git a/include/linux/suspend.h b/include/linux/suspend.h
-index cd97d2c8840c..5030ab13db06 100644
---- a/include/linux/suspend.h
-+++ b/include/linux/suspend.h
-@@ -197,6 +197,12 @@ struct platform_s2idle_ops {
+Index: source_rt/include/linux/suspend.h
+===================================================================
+--- source_rt.orig/include/linux/suspend.h	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/include/linux/suspend.h	2021-07-27 07:21:02.231857000 +0000
+@@ -197,6 +197,12 @@
  	void (*end)(void);
  };
  
@@ -152,11 +152,11 @@
  #ifdef CONFIG_SUSPEND
  extern suspend_state_t mem_sleep_current;
  extern suspend_state_t mem_sleep_default;
-diff --git a/include/linux/swait.h b/include/linux/swait.h
-index 12612823c2cb..21ae66cd41d3 100644
---- a/include/linux/swait.h
-+++ b/include/linux/swait.h
-@@ -160,7 +160,9 @@ static inline bool swq_has_sleeper(struct swait_queue_head *wq)
+Index: source_rt/include/linux/swait.h
+===================================================================
+--- source_rt.orig/include/linux/swait.h	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/include/linux/swait.h	2021-07-27 07:21:02.231857000 +0000
+@@ -160,7 +160,9 @@
  extern void swake_up_one(struct swait_queue_head *q);
  extern void swake_up_all(struct swait_queue_head *q);
  extern void swake_up_locked(struct swait_queue_head *q);
@@ -166,11 +166,11 @@
  extern void prepare_to_swait_exclusive(struct swait_queue_head *q, struct swait_queue *wait, int state);
  extern long prepare_to_swait_event(struct swait_queue_head *q, struct swait_queue *wait, int state);
  
-diff --git a/kernel/power/hibernate.c b/kernel/power/hibernate.c
-index 69c4cd472def..95dbcf0d51f0 100644
---- a/kernel/power/hibernate.c
-+++ b/kernel/power/hibernate.c
-@@ -689,6 +689,10 @@ static int load_image_and_restore(void)
+Index: source_rt/kernel/power/hibernate.c
+===================================================================
+--- source_rt.orig/kernel/power/hibernate.c	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/kernel/power/hibernate.c	2021-07-27 07:21:02.231857000 +0000
+@@ -689,6 +689,10 @@
  	return error;
  }
  
@@ -181,7 +181,7 @@
  /**
   * hibernate - Carry out system hibernation, including saving the image.
   */
-@@ -702,6 +706,8 @@ int hibernate(void)
+@@ -702,6 +706,8 @@
  		return -EPERM;
  	}
  
@@ -190,7 +190,7 @@
  	lock_system_sleep();
  	/* The snapshot device should not be opened while we're running */
  	if (!atomic_add_unless(&snapshot_device_available, -1, 0)) {
-@@ -778,6 +784,7 @@ int hibernate(void)
+@@ -778,6 +784,7 @@
  	atomic_inc(&snapshot_device_available);
   Unlock:
  	unlock_system_sleep();
@@ -198,11 +198,11 @@
  	pr_info("hibernation exit\n");
  
  	return error;
-diff --git a/kernel/power/suspend.c b/kernel/power/suspend.c
-index 27f149f5d4a9..a9a6ada0c8e4 100644
---- a/kernel/power/suspend.c
-+++ b/kernel/power/suspend.c
-@@ -595,6 +595,8 @@ static int enter_state(suspend_state_t state)
+Index: source_rt/kernel/power/suspend.c
+===================================================================
+--- source_rt.orig/kernel/power/suspend.c	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/kernel/power/suspend.c	2021-07-27 07:21:02.231857000 +0000
+@@ -595,6 +595,8 @@
  	return error;
  }
  
@@ -211,7 +211,7 @@
  /**
   * pm_suspend - Externally visible function for suspending the system.
   * @state: System sleep state to enter.
-@@ -609,6 +611,7 @@ int pm_suspend(suspend_state_t state)
+@@ -609,6 +611,7 @@
  	if (state <= PM_SUSPEND_ON || state >= PM_SUSPEND_MAX)
  		return -EINVAL;
  
@@ -219,7 +219,7 @@
  	pr_info("suspend entry (%s)\n", mem_sleep_labels[state]);
  	error = enter_state(state);
  	if (error) {
-@@ -618,6 +621,7 @@ int pm_suspend(suspend_state_t state)
+@@ -618,6 +621,7 @@
  		suspend_stats.success++;
  	}
  	pr_info("suspend exit\n");
@@ -227,11 +227,11 @@
  	return error;
  }
  EXPORT_SYMBOL(pm_suspend);
-diff --git a/kernel/sched/completion.c b/kernel/sched/completion.c
-index a1ad5b7d5521..49c14137988e 100644
---- a/kernel/sched/completion.c
-+++ b/kernel/sched/completion.c
-@@ -29,12 +29,12 @@ void complete(struct completion *x)
+Index: source_rt/kernel/sched/completion.c
+===================================================================
+--- source_rt.orig/kernel/sched/completion.c	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/kernel/sched/completion.c	2021-07-27 07:21:02.231857000 +0000
+@@ -29,12 +29,12 @@
  {
  	unsigned long flags;
  
@@ -247,7 +247,7 @@
  }
  EXPORT_SYMBOL(complete);
  
-@@ -58,10 +58,10 @@ void complete_all(struct completion *x)
+@@ -58,10 +58,10 @@
  {
  	unsigned long flags;
  
@@ -261,7 +261,7 @@
  }
  EXPORT_SYMBOL(complete_all);
  
-@@ -70,20 +70,20 @@ do_wait_for_common(struct completion *x,
+@@ -70,20 +70,20 @@
  		   long (*action)(long), long timeout, int state)
  {
  	if (!x->done) {
@@ -287,7 +287,7 @@
  		if (!x->done)
  			return timeout;
  	}
-@@ -100,9 +100,9 @@ __wait_for_common(struct completion *x,
+@@ -100,9 +100,9 @@
  
  	complete_acquire(x);
  
@@ -299,7 +299,7 @@
  
  	complete_release(x);
  
-@@ -291,12 +291,12 @@ bool try_wait_for_completion(struct completion *x)
+@@ -291,12 +291,12 @@
  	if (!READ_ONCE(x->done))
  		return false;
  
@@ -314,7 +314,7 @@
  	return ret;
  }
  EXPORT_SYMBOL(try_wait_for_completion);
-@@ -322,8 +322,8 @@ bool completion_done(struct completion *x)
+@@ -322,8 +322,8 @@
  	 * otherwise we can end up freeing the completion before complete()
  	 * is done referencing it.
  	 */
@@ -325,11 +325,11 @@
  	return true;
  }
  EXPORT_SYMBOL(completion_done);
-diff --git a/kernel/sched/swait.c b/kernel/sched/swait.c
-index 091347205736..c58068d2ee06 100644
---- a/kernel/sched/swait.c
-+++ b/kernel/sched/swait.c
-@@ -32,6 +32,25 @@ void swake_up_locked(struct swait_queue_head *q)
+Index: source_rt/kernel/sched/swait.c
+===================================================================
+--- source_rt.orig/kernel/sched/swait.c	2021-07-27 07:21:02.239857000 +0000
++++ source_rt/kernel/sched/swait.c	2021-07-27 07:21:02.231857000 +0000
+@@ -32,6 +32,25 @@
  }
  EXPORT_SYMBOL(swake_up_locked);
  
@@ -355,7 +355,7 @@
  void swake_up_one(struct swait_queue_head *q)
  {
  	unsigned long flags;
-@@ -70,7 +89,7 @@ void swake_up_all(struct swait_queue_head *q)
+@@ -70,7 +89,7 @@
  }
  EXPORT_SYMBOL(swake_up_all);
  
@@ -364,6 +364,3 @@
  {
  	wait->task = current;
  	if (list_empty(&wait->task_list))
--- 
-2.17.1
-
