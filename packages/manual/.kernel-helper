#!/usr/bin/env bash


import_gpg_keys() {

	if [ -z ${1+x} ]; then echo "First argument of ${FUNCNAME[0]} must be path to bundle dir"; return 1;fi 
	if [ -z ${2+x} ]; then echo "First argument of ${FUNCNAME[0]} function must be path to gpgkeys file"; return 1; fi
	bundleDir=$1
	path_to_gpg_keys=$2
	if [ ! -f ${path_to_gpg_keys} ]; then echo "${path_to_gpg_keys} does not exist"; return 1; fi
	if [ ! -d ${bundleDir} ]; then echo "${FUNCNAME[0]}: ${bundleDir} does not exist"; return 1; fi

	echo "### getting the keys of the maintainers using ${path_to_gpg_keys}"
	for i in $(cat ${path_to_gpg_keys}); do
		echo "key: $i"
		if [[ $i == *"@"* ]]; then	
			gpg --keyserver hkps://keyserver.ubuntu.com --locate-keys $i
		else			
			gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys $i
		fi
	done
	gpg --tofu-policy good $(gpg --list-keys $(cat ${path_to_gpg_keys}) | grep "^      ")
	gpg --import ${bundleDir}/cert/sign.pub
}



get_kernel_sources() {

	if [ -z ${1+x} ]; then echo "First argument of ${FUNCNAME[0]} must be path to bundle dir"; return 1;fi 
	bundleDir=$1
	if [ ! -d ${bundleDir} ]; then echo "${FUNCNAME[0]}: ${bundleDir} does not exist"; return 1; fi

	if [ -z ${KERNEL_VERSION+x} ]; then echo "KERNEL_VERSION is unset"; return 1; else echo "KERNEL_VERSION is set to '$KERNEL_VERSION'"; fi
	if [ -z ${KERNEL_RT_VERSION+x} ]; then echo "KERNEL_RT_VERSION is unset"; return 1; else echo "KERNEL_RT_VERSION is set to '$KERNEL_RT_VERSION'"; fi
	

	echo "### pulling kernel and rt-patches"

	wget -O ${bundleDir}/linux-$KERNEL_VERSION.tar.sign \
	        https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$KERNEL_VERSION.tar.sign

	if [ ! -f ${bundleDir}/linux-$KERNEL_VERSION.tar.sign ]; then echo "${bundleDir}/linux-${KERNEL_VERSION}.tar.sign not found!"; return 1; fi
	
	wget -O ${bundleDir}/patches-$KERNEL_RT_VERSION.tar.sign \
	        https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/$(cut -d. -f-2 <<< ${KERNEL_BASE})/older/patches-$KERNEL_RT_VERSION.tar.sign

	while [ ! -e ${bundleDir}/linux-$KERNEL_VERSION.tar.xz ] || ! $(xz -dc linux-$KERNEL_VERSION.tar.xz | gpg --verify ${bundleDir}/linux-$KERNEL_VERSION.tar.sign -); do
		wget -O ${bundleDir}/linux-$KERNEL_VERSION.tar.xz \
		      	https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$KERNEL_VERSION.tar.xz
	done

	while [ ! -e ${bundleDir}/patches-$KERNEL_RT_VERSION.tar.xz ] || ! $(xz -dc ${bundleDir}/patches-$KERNEL_RT_VERSION.tar.xz | gpg --verify ${bundleDir}/patches-$KERNEL_RT_VERSION.tar.sign -); do
	        wget -O ${bundleDir}/patches-$KERNEL_RT_VERSION.tar.xz \
	                https://mirrors.edge.kernel.org/pub/linux/kernel/projects/rt/$(cut -d. -f-2 <<< ${KERNEL_BASE})/older/patches-$KERNEL_RT_VERSION.tar.xz
	done

}


get_old_kernel() {
	if [ -z ${1+x} ]; then echo "First argument of ${FUNCNAME[0]} must be path to bundle dir"; return 1;fi 
	bundleDir=$1
	pwd
	if [ ! -d ${bundleDir} ]; then echo "${FUNCNAME[0]}: ${bundleDir} does not exist"; return 1; fi
	
	if [ -z ${KERNEL_DEBIAN+x} ]; then echo "KERNEL_DEBIAN is unset"; return 1; else echo "KERNEL_DEBIAN is set to '$KERNEL_DEBIAN'"; fi

	echo "### cloning the old kernel to linux-$KERNEL_DEBIAN"
	if [ ! -d ${bundleDir}/linux-$KERNEL_DEBIAN ]; then
	        git -c advice.detachedHead=false clone --depth 1 --single \
			--branch debian/$KERNEL_DEBIAN \
	                https://salsa.debian.org/kernel-team/linux.git ${bundleDir}/linux-$KERNEL_DEBIAN
	fi
}


get_debian_release_env() {
	if [ -z ${1+x} ]; then echo "First argument of ${FUNCNAME[0]} must be path to bundle dir"; return 1;fi 
	bundleDir=$1
	if [ ! -d ${bundleDir} ]; then echo "${FUNCNAME[0]}: ${bundleDir} does not exist"; return 1; fi

	releaseEnvDir=${bundleDir}/linux-release-env	

	if [ -z ${BUILDENV+x} ]; then echo "BUILDENV is unset"; return 1; else echo "BUILDENV is set to '$BUILDENV'"; fi
	echo "### cloning the latest and greatest debian release environment to for the kernel"
	if [ -d ${releaseEnvDir} ]; then
		pushd ${releaseEnvDir};
	       	git reset --hard;
	       	git checkout $BUILDENV;
	       	git pull --ff-only -q;
	       	popd
	else	
		git clone --single --branch $BUILDENV https://salsa.debian.org/kernel-team/linux.git ${releaseEnvDir}
	fi
	pushd ${releaseEnvDir}
	## binding build env to the version when gardenlinux was build
	#BUILDENV=$(git log --before "@${BUILDEPOCH}" -n1 --oneline --no-abbrev-commit | cut -f1 -d' ')
	#git -c advice.detachedHead=false checkout $BUILDENV
	#CHANGELOG+="  * using Build Environment of $BUILDENV\n"
	# binding build to the originial build env
	git -c advice.detachedHead=false checkout debian/$KERNEL_DEBIAN
	popd
}

get_ufs5_from_upstream() {
	if [ -z ${1+x} ]; then echo "First argument of ${FUNCNAME[0]} must be path to bundle dir"; return 1;fi 
	bundleDir=$1
	if [ ! -d ${bundleDir} ]; then echo "${FUNCNAME[0]}: ${bundleDir} does not exist"; return 1; fi

	if [ -z ${KERNEL_BASE+x} ]; then echo "KERNEL_BASE is unset"; return 1; else echo "KERNEL_BASE is set to '$KERNEL_BASE'"; fi

	echo "### pulling aufs5 from upstream not from debian"

	if [ ! -d  ${bundleDir}/aufs5-standalone ]; then
		git -c advice.detachedHead=false clone --single \
			--branch aufs$(cut -d. -f-2 <<< ${KERNEL_BASE}) \
			https://github.com/sfjro/aufs5-standalone.git ${bundleDir}/aufs5-standalone
	fi

	pushd ${bundleDir}/aufs5-standalone
	aufscommit=$(git log -n1 --oneline --no-abbrev-commit | cut -f1 -d' ')
	popd
}


get_linux_stable_for_comments() {
	if [ -z ${1+x} ]; then echo "First argument of ${FUNCNAME[0]} must be path to bundle dir"; return 1;fi 
	bundleDir=$1
	if [ ! -d ${bundleDir} ]; then echo "${FUNCNAME[0]}: ${bundleDir} does not exist"; return 1; fi
	
	if [ -z ${KERNEL_BASE+x} ]; then echo "KERNEL_BASE is unset"; return 1; else echo "KERNEL_BASE is set to '$KERNEL_BASE'"; fi
	
	echo "### pulling linux-stable for comments"
	
	# checking out linux stable to have the whole changelog from the kernel readable for debian/bin/stable-update
	if [ ! -d ${bundleDir}/linux-stable ]; then
        	git clone --single --branch linux-$(echo $KERNEL_BASE | sed s/0$/y/) --bare \
			https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git ${bundleDir}/linux-stable
	fi
}


